Index: src/main/java/com/github/m4plewe/collegetboicleaner/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.github.m4plewe.collegetboicleaner;\r\n\r\nimport java.util.*;\r\nclass FourSoulsGame {\r\n    public List<Player> players;\r\n    public Deck treasureDeck;\r\n    public Deck monsterDeck;\r\n    public Deck lootDeck;\r\n    public List<MonsterCard> monstersInPlay;\r\n    public List<TreasureCard> shopItems;\r\n    public FourSoulsGame(int numPlayers) {\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        players = new ArrayList<>();\r\n\r\n        for (int i = 1; i <= numPlayers; i++) {\r\n\r\n            System.out.println(\"Type player #\" + i + \" name.\");\r\n\r\n            String playerName = sc.nextLine();\r\n\r\n            players.add(new Player(playerName));\r\n\r\n        }\r\n\r\n        treasureDeck = initializeTreasureDeck();\r\n        monsterDeck = initializeMonsterDeck();\r\n        lootDeck = initializeLootDeck();\r\n\r\n        shopItems = new ArrayList<>();\r\n        monstersInPlay = new ArrayList<>();\r\n\r\n    }\r\n\r\n    private Deck initializeMonsterDeck() {\r\n        Deck deck = new Deck();\r\n\r\n        deck.addCard(new MonsterCard(\"Black Bony\", 3, 4, 1, \"BlackBonyDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Boom Fly\", 1, 4, 1, \"BoomFlyDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Clotty\", 2, 3, 1, \"ClottyDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Big Spider\", 3, 4, 1, \"BigSpiderDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Cod Worm\", 1, 5, 0, \"CodWormDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Conjoined Fatty\", 4, 3, 2, \"ConjoinedFattyDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Dank Globin\", 2, 4, 2, \"DankGlobinDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Dinga\", 3, 3, 1, \"DingaDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Dip\", 1, 4, 1, \"DipDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Dople\", 2, 4, 2, \"DopleDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Evil Twin\", 3, 5, 2, \"EvilTwinDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Fat Bat\", 3, 5, 1, \"FatBatDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Fatty\", 4, 2, 1, \"FattyDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Fly\", 1, 2, 1, \"FlyDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Greedling\", 2, 5, 1, \"GreedlingDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Hanger\", 2, 4, 2, \"HangerDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Hopper\", 2, 3, 1, \"HopperDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Horf\", 1, 4, 1, \"HorfDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Keeper Head\", 2, 4, 1, \"KeeperHeadDefeat\"));\r\n        deck.addCard(new MonsterCard(\"Leaper\", 2, 4, 1, \"LeaperDefeat\"));\r\n        Collections.shuffle(deck.cards);\r\n\r\n        return deck;\r\n    }\r\n\r\n    private Deck initializeTreasureDeck() {\r\n        Deck deck = new Deck();\r\n\r\n        // Treasure Deck:\r\n\r\n        deck.addCard(new TreasureCard(\"Brimstone\", false, false));\r\n        deck.addCard(new TreasureCard(\"Sausage\", false, false));\r\n        deck.addCard(new TreasureCard(\"Sacred Heart\", false, false));\r\n        deck.addCard(new TreasureCard(\"Dinner\", false, false));\r\n        deck.addCard(new TreasureCard(\"Lard\", false, false));\r\n        deck.addCard(new TreasureCard(\"Dry Baby\", false, false));\r\n        deck.addCard(new TreasureCard(\"Empty Vessel\", false, false));\r\n        deck.addCard(new TreasureCard(\"Greed's Gullet\", false, false));\r\n        deck.addCard(new TreasureCard(\"Meat!\", false, false));\r\n        deck.addCard(new TreasureCard(\"Synthoil\", false, false));\r\n\r\n        // Active\r\n\r\n        deck.addCard(new TreasureCard(\"The Chest\", true, false));\r\n        deck.addCard(new TreasureCard(\"Pandora's Box\", true, false));\r\n        deck.addCard(new TreasureCard(\"The Battery\", true, false));\r\n        deck.addCard(new TreasureCard(\"Host Hat\", true, false));\r\n        deck.addCard(new TreasureCard(\"Mystery Sack\", true, false));\r\n        deck.addCard(new TreasureCard(\"Book of Sin\", true, false));\r\n        deck.addCard(new TreasureCard(\"Chaos Card\", true, false));\r\n        deck.addCard(new TreasureCard(\"Battery Bum\", true, false));\r\n        deck.addCard(new TreasureCard(\"Dark Bum\", true, false));\r\n        deck.addCard(new TreasureCard(\"Plan C\", true, false));\r\n\r\n        Collections.shuffle(deck.cards);\r\n\r\n        return deck;\r\n    }\r\n\r\n    private Deck initializeLootDeck() {\r\n\r\n        Deck deck = new Deck();\r\n\r\n        deck.addCard(new LootCard(\"A Penny!\", \"\", \"aPenny\", false));\r\n        deck.addCard(new LootCard(\"2 Cents!\", \"\", \"twoCents\", false));\r\n        deck.addCard(new LootCard(\"3 Cents!\", \"\", \"threeCents\", false));\r\n        deck.addCard(new LootCard(\"4 Cents!\", \"\", \"fourCents\", false));\r\n        deck.addCard(new LootCard(\"Bomb\", \"\", \"bomb\", false));\r\n        deck.addCard(new LootCard(\"Charged Penny\", \"\", \"chargedPenny\", false));\r\n        deck.addCard(new LootCard(\"Credit Card\", \"\", \"creditCard\", false));\r\n        deck.addCard(new LootCard(\"Jera\", \"\", \"jera\", false));\r\n        deck.addCard(new LootCard(\"Soul Heart\", \"\", \"soulHeart\", false));\r\n\r\n        // Repitiendo para luego el shuffle\r\n\r\n        deck.addCard(new LootCard(\"A Penny!\", \"\", \"aPenny\", false));\r\n        deck.addCard(new LootCard(\"2 Cents!\", \"\", \"twoCents\", false));\r\n        deck.addCard(new LootCard(\"3 Cents!\", \"\", \"threeCents\", false));\r\n        deck.addCard(new LootCard(\"4 Cents!\", \"\", \"fourCents\", false));\r\n        deck.addCard(new LootCard(\"Bomb\", \"\", \"bomb\", false));\r\n        deck.addCard(new LootCard(\"Charged Penny\", \"\", \"chargedPenny\", false));\r\n        deck.addCard(new LootCard(\"Credit Card\", \"\", \"creditCard\", false));\r\n        deck.addCard(new LootCard(\"Jera\", \"\", \"jera\", false));\r\n        deck.addCard(new LootCard(\"Soul Heart\", \"\", \"soulHeart\", false));\r\n        deck.addCard(new LootCard(\"A Penny!\", \"\", \"aPenny\", false));\r\n        deck.addCard(new LootCard(\"2 Cents!\", \"\", \"twoCents\", false));\r\n        deck.addCard(new LootCard(\"3 Cents!\", \"\", \"threeCents\", false));\r\n        deck.addCard(new LootCard(\"4 Cents!\", \"\", \"fourCents\", false));\r\n        deck.addCard(new LootCard(\"Bomb\", \"\", \"bomb\", false));\r\n        deck.addCard(new LootCard(\"Charged Penny\", \"\", \"chargedPenny\", false));\r\n        deck.addCard(new LootCard(\"Credit Card\", \"\", \"creditCard\", false));\r\n        deck.addCard(new LootCard(\"Jera\", \"\", \"jera\", false));\r\n        deck.addCard(new LootCard(\"Soul Heart\", \"\", \"soulHeart\", false));\r\n        deck.addCard(new LootCard(\"A Penny!\", \"\", \"aPenny\", false));\r\n        deck.addCard(new LootCard(\"2 Cents!\", \"\", \"twoCents\", false));\r\n        deck.addCard(new LootCard(\"3 Cents!\", \"\", \"threeCents\", false));\r\n        deck.addCard(new LootCard(\"4 Cents!\", \"\", \"fourCents\", false));\r\n        deck.addCard(new LootCard(\"Bomb\", \"\", \"bomb\", false));\r\n        deck.addCard(new LootCard(\"Charged Penny\", \"\", \"chargedPenny\", false));\r\n        deck.addCard(new LootCard(\"Credit Card\", \"\", \"creditCard\", false));\r\n        deck.addCard(new LootCard(\"Jera\", \"\", \"jera\", false));\r\n        deck.addCard(new LootCard(\"Soul Heart\", \"\", \"soulHeart\", false));\r\n        deck.addCard(new LootCard(\"A Penny!\", \"\", \"aPenny\", false));\r\n        deck.addCard(new LootCard(\"2 Cents!\", \"\", \"twoCents\", false));\r\n        deck.addCard(new LootCard(\"3 Cents!\", \"\", \"threeCents\", false));\r\n        deck.addCard(new LootCard(\"4 Cents!\", \"\", \"fourCents\", false));\r\n        deck.addCard(new LootCard(\"Bomb\", \"\", \"bomb\", false));\r\n        deck.addCard(new LootCard(\"Charged Penny\", \"\", \"chargedPenny\", false));\r\n        deck.addCard(new LootCard(\"Credit Card\", \"\", \"creditCard\", false));\r\n        deck.addCard(new LootCard(\"Jera\", \"\", \"jera\", false));\r\n        deck.addCard(new LootCard(\"Soul Heart\", \"\", \"soulHeart\", false));\r\n\r\n        Collections.shuffle(deck.cards);\r\n\r\n        while (deck.cards.size() > 26) {\r\n            deck.cards.remove(deck.cards.size() - 1);\r\n        }\r\n\r\n        return deck;\r\n\r\n    }\r\n\r\n    public void restockShopAndAddMonster() {\r\n        // Check if the shop needs restocking\r\n        if (shopItems.size() < 2) {\r\n            // Restock the shop with new items\r\n            for (int i = shopItems.size(); i < 2; i++) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                shopItems.add(item);\r\n            }\r\n        }\r\n\r\n        // Check if new monsters need to be added\r\n        if (monstersInPlay.size() < 2) {\r\n            // Add new monsters\r\n            for (int i = monstersInPlay.size(); i < 2; i++) {\r\n                MonsterCard monster = monsterDeck.drawMonster();\r\n                monstersInPlay.add(monster);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void monsterDefeated(Player player, String monsterDefeatString) {\r\n\r\n        if (monsterDefeatString.equals(\"BlackBonyDefeat\")) {\r\n            player.coins += 2;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"BoomFlyDefeat\")) {\r\n            player.souls += 1;\r\n        } else if (monsterDefeatString.equals(\"ClottyDefeat\")) {\r\n            player.coins += 1;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"BigSpiderDefeat\")) {\r\n            player.coins += 1;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"CodWormDefeat\")) {\r\n            player.souls += 1;\r\n        } else if (monsterDefeatString.equals(\"ConjoinedFattyDefeat\")) {\r\n            player.souls += 1;\r\n        } else if (monsterDefeatString.equals(\"DankGlobinDefeat\")) {\r\n            player.coins += 2;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"DingaDefeat\")) {\r\n            player.souls += 2;\r\n        } else if (monsterDefeatString.equals(\"DipDefeat\")) {\r\n            player.coins += 1;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"DopleDefeat\")) {\r\n            player.souls += 2;\r\n        } else if (monsterDefeatString.equals(\"EvilTwinDefeat\")) {\r\n            player.coins += 2;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"FatBatDefeat\")) {\r\n            player.souls += 1;\r\n        } else if (monsterDefeatString.equals(\"FattyDefeat\")) {\r\n            player.coins += 1;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"FlyDefeat\")) {\r\n            player.souls += 1;\r\n        } else if (monsterDefeatString.equals(\"GreedlingDefeat\")) {\r\n            player.coins += 2;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"HangerDefeat\")) {\r\n            player.souls += 1;\r\n        } else if (monsterDefeatString.equals(\"HopperDefeat\")) {\r\n            player.coins += 1;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"HorfDefeat\")) {\r\n            player.souls += 1;\r\n        } else if (monsterDefeatString.equals(\"KeeperHeadDefeat\")) {\r\n            player.coins += 1;\r\n            if (!treasureDeck.cards.isEmpty()) {\r\n                TreasureCard item = treasureDeck.drawTreasure();\r\n                player.hand.add(item);\r\n                // Handle the treasure card as needed\r\n            }\r\n        } else if (monsterDefeatString.equals(\"LeaperDefeat\")) {\r\n            player.souls += 2;\r\n        }\r\n        // Add more cases for other monsters' defeat strings and item rewards as needed.\r\n    }\r\n\r\n    public void startGame() {\r\n        // Add game setup logic here, like shuffling decks, dealing cards, etc.\r\n        // Implement game rules as described in your game's rules.\r\n\r\n        int currentPlayerIndex = 0;\r\n\r\n        // For example, you can deal starting hands to players.\r\n\r\n        for (Player player : players) {\r\n            for (int i = 0; i < 2; i++) {\r\n                Card card = lootDeck.draw();\r\n                if (card != null) {\r\n                    player.hand.add(card);\r\n                }\r\n            }\r\n        }\r\n\r\n        while (!isGameOver()) {\r\n            Player currentPlayer = players.get(currentPlayerIndex);\r\n            boolean endTurn = false;\r\n\r\n            restockShopAndAddMonster();\r\n\r\n            // Reset boolean flags at the start of the player's turn\r\n            currentPlayer.usedLootCardThisTurn = false;\r\n            currentPlayer.boughtItemThisTurn = false;\r\n            currentPlayer.hadFoughtAnEnemie = false;\r\n\r\n            currentPlayer.health = 2;\r\n            currentPlayer.damage = 1;\r\n\r\n            for (int i = 0; i < currentPlayer.hand.size(); i++) {\r\n                Card card = currentPlayer.hand.get(i);\r\n                if (card instanceof TreasureCard && ((TreasureCard) card).isActive && ((TreasureCard) card).Used) {\r\n                    ((TreasureCard) card).Used = false;\r\n                }\r\n            }\r\n\r\n            for (Player player : players) {\r\n                player.boughtItemThisTurn = false;\r\n            }\r\n\r\n            if (currentPlayer.hand.size() < 10) {\r\n                for (int i = 0; i < 1; i++) {\r\n                    Card card = lootDeck.draw();\r\n                    if (card != null) {\r\n                        currentPlayer.hand.add(card);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (Card card : currentPlayer.hand) {\r\n\r\n                if (card instanceof TreasureCard && !((TreasureCard) card).isActive) {\r\n\r\n                    Player.applyPredefinedPassiveEffect(currentPlayer, card.name);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            do {\r\n\r\n                // Display player's stats and options\r\n                System.out.println(\"Player: \" + currentPlayer.name);\r\n                System.out.println(\"Coins: \" + currentPlayer.coins);\r\n                System.out.println(\"Health: \" + currentPlayer.health);\r\n                System.out.println(\"Damage: \" + currentPlayer.damage);\r\n\r\n                System.out.println(\"Hand: \");\r\n\r\n                for (Card card : currentPlayer.hand) {\r\n\r\n                    System.out.println(card.name);\r\n\r\n                }\r\n\r\n                System.out.println(\"Souls: \" + currentPlayer.souls);\r\n\r\n                // Offer options to the player\r\n                System.out.println(\"Options:\");\r\n                System.out.println(\"1. Activate an active Treasure card\");\r\n                System.out.println(\"2. Use a loot card\");\r\n                System.out.println(\"3. Buy a Treasure card\");\r\n                System.out.println(\"4. Attack a monster\");\r\n                System.out.println(\"5. End Turn\");\r\n\r\n                // Read the player's choice\r\n\r\n                Scanner sc = new Scanner(System.in);\r\n\r\n                int choice = sc.nextInt();/* Read the player's choice from input */\r\n\r\n                switch (choice) {\r\n                    case 1:\r\n\r\n                        // Activate an active Treasure card\r\n\r\n                        System.out.println(\"Select an Active Treasure Card to activate:\");\r\n\r\n                        for (int i = 0; i < currentPlayer.hand.size(); i++) {\r\n                            Card card = currentPlayer.hand.get(i);\r\n                            if (card instanceof TreasureCard && ((TreasureCard) card).isActive\r\n                                    && !((TreasureCard) card).Used) {\r\n                                String cardName = card.name;\r\n                                System.out.println((i + 1) + \". \" + cardName);\r\n                            }\r\n                        }\r\n\r\n                        System.out.println(\"Enter the number of the card to activate (or 0 to cancel):\");\r\n                        int cardIndexToActivate = sc.nextInt();\r\n\r\n                        if (cardIndexToActivate > 0 && cardIndexToActivate <= currentPlayer.hand.size()) {\r\n                            TreasureCard selectedTreasureCard = (TreasureCard) currentPlayer.hand\r\n                                    .get(cardIndexToActivate - 1);\r\n                            String cardName = selectedTreasureCard.name;\r\n\r\n                            if (cardName.equals(\"The Chest\") && !selectedTreasureCard.Used) {\r\n\r\n                                currentPlayer.souls += 1;\r\n\r\n                                currentPlayer.hand.remove(selectedTreasureCard);\r\n\r\n                            } else if (cardName.equals(\"Pandora's Box\") && !selectedTreasureCard.Used) {\r\n\r\n                                int RandomPandora = (int) (1 + Math.random() * 6);\r\n\r\n                                if (RandomPandora == 1) {\r\n\r\n                                    currentPlayer.coins += 1;\r\n\r\n                                } else if (RandomPandora == 2) {\r\n\r\n                                    currentPlayer.coins += 6;\r\n\r\n                                } else if (RandomPandora == 3) {\r\n\r\n                                    currentPlayer.damage = 999;\r\n\r\n                                } else if (RandomPandora == 5) {\r\n\r\n                                    currentPlayer.coins += 9;\r\n\r\n                                } else if (RandomPandora == 6) {\r\n\r\n                                    currentPlayer.souls += 1;\r\n\r\n                                    currentPlayer.hand.remove(selectedTreasureCard);\r\n\r\n                                }\r\n\r\n                                selectedTreasureCard.Used = true;\r\n\r\n                            } else if (cardName.equals(\"The Battery\") && !selectedTreasureCard.Used) {\r\n\r\n                                currentPlayer.boughtItemThisTurn = false;\r\n                                currentPlayer.hadFoughtAnEnemie = false;\r\n                                currentPlayer.usedLootCardThisTurn = false;\r\n\r\n                                selectedTreasureCard.Used = true;\r\n\r\n                            } else if (cardName.equals(\"Host Hat\") && !selectedTreasureCard.Used) {\r\n\r\n                                currentPlayer.health += 1;\r\n\r\n                                selectedTreasureCard.Used = true;\r\n\r\n                            } else if (cardName.equals(\"Mystery Sack\") && !selectedTreasureCard.Used) {\r\n\r\n                                int RandomMysterySack = (int) (1 + Math.random() * 6);\r\n\r\n                                if (RandomMysterySack <= 2) {\r\n\r\n                                    Card card = lootDeck.draw();\r\n\r\n                                    currentPlayer.hand.add(card);\r\n\r\n                                } else if (RandomMysterySack >= 3) {\r\n\r\n                                    currentPlayer.coins += 4;\r\n\r\n                                }\r\n\r\n                                selectedTreasureCard.Used = true;\r\n\r\n                            } else if (cardName.equals(\"Book of Sin\") && !selectedTreasureCard.Used) {\r\n\r\n                                int RandomBookOfSin = (int) (1 + Math.random() * 6);\r\n\r\n                                if (RandomBookOfSin <= 2) {\r\n\r\n                                    currentPlayer.coins += 1;\r\n\r\n                                } else if (RandomBookOfSin == 3 || RandomBookOfSin == 4) {\r\n\r\n                                    Card card = lootDeck.draw();\r\n\r\n                                    currentPlayer.hand.add(card);\r\n\r\n                                } else if (RandomBookOfSin >= 5) {\r\n\r\n                                    currentPlayer.health += 1;\r\n\r\n                                }\r\n\r\n                                selectedTreasureCard.Used = true;\r\n\r\n                            } else if (cardName.equals(\"Chaos Card\") && !selectedTreasureCard.Used) {\r\n\r\n                                for (MonsterCard selectedMonster : monstersInPlay) {\r\n\r\n                                    monsterDefeated(currentPlayer, selectedMonster.defeat);\r\n\r\n                                    System.out.println(\"Destroyed with Chaos Card: \" + selectedMonster.name);\r\n\r\n                                    monstersInPlay.remove(selectedMonster);\r\n\r\n                                }\r\n\r\n                                currentPlayer.hand.remove(selectedTreasureCard);\r\n\r\n                            } else if (cardName.equals(\"Battery Bum\") && !selectedTreasureCard.Used) {\r\n\r\n                                if (currentPlayer.coins >= 4) {\r\n\r\n                                    for (int i = 0; i < currentPlayer.hand.size(); i++) {\r\n                                        Card card = currentPlayer.hand.get(i);\r\n                                        if (card instanceof TreasureCard && ((TreasureCard) card).isActive\r\n                                                && ((TreasureCard) card).Used) {\r\n                                            System.out.println((i + 1) + \". \" + card.name);\r\n                                        }\r\n                                    }\r\n\r\n                                    System.out.println(\"Enter the number of the card to reactivate (or 0 to cancel):\");\r\n                                    int cardIndexToReactivate = sc.nextInt();\r\n\r\n                                    if (cardIndexToReactivate > 0\r\n                                            && cardIndexToReactivate <= currentPlayer.hand.size()) {\r\n                                        TreasureCard cardToReactivate = (TreasureCard) currentPlayer.hand\r\n                                                .get(cardIndexToReactivate - 1);\r\n                                        if (cardToReactivate.isActive && cardToReactivate.Used) {\r\n                                            cardToReactivate.Used = false;\r\n                                            currentPlayer.coins -= 4;\r\n                                            System.out\r\n                                                    .println(\"Reactivated \" + cardToReactivate.name + \" for 4 cents.\");\r\n                                        } else {\r\n                                            System.out\r\n                                                    .println(\r\n                                                            \"Invalid card selection. Make sure it's a used active card.\");\r\n                                        }\r\n                                    } else if (cardIndexToReactivate != 0) {\r\n                                        System.out.println(\"Invalid card selection.\");\r\n\r\n                                    }\r\n\r\n                                } else {\r\n\r\n                                    System.out.println(\"You don't have enough coins for Bum.\");\r\n\r\n                                }\r\n\r\n                            } else if (cardName.equals(\"Dark Bum\") && !selectedTreasureCard.Used) {\r\n\r\n                                int RandomDarkBum = (int) (1 + Math.random() * 6);\r\n\r\n                                if (RandomDarkBum <= 2) {\r\n\r\n                                    currentPlayer.coins += 3;\r\n\r\n                                } else if (RandomDarkBum == 3 || RandomDarkBum == 4) {\r\n\r\n                                    Card card = lootDeck.draw();\r\n\r\n                                    currentPlayer.hand.add(card);\r\n\r\n                                } else if (RandomDarkBum >= 5) {\r\n\r\n                                    currentPlayer.health -= 1;\r\n\r\n                                }\r\n\r\n                                selectedTreasureCard.Used = true;\r\n\r\n                            } else if (cardName.equals(\"Plan C\") && !selectedTreasureCard.Used) {\r\n\r\n                                for (MonsterCard selectedMonster : monstersInPlay) {\r\n\r\n                                    monstersInPlay.remove(selectedMonster);\r\n\r\n                                    monsterDefeated(currentPlayer, selectedMonster.defeat);\r\n\r\n                                    System.out.println(\"Plan C defeated: \" + selectedMonster.name);\r\n\r\n                                }\r\n\r\n                                if (currentPlayer.coins > 0) {\r\n\r\n                                    currentPlayer.coins -= 1;\r\n                                }\r\n\r\n                                boolean lootCardRemoved = false; // Flag to track if a LootCard has been\r\n                                // removed\r\n\r\n                                for (Card card : currentPlayer.hand) {\r\n                                    if (card instanceof LootCard) {\r\n                                        currentPlayer.hand.remove(card);\r\n                                        lootCardRemoved = true;\r\n                                        break; // Remove only one LootCard\r\n                                    }\r\n                                }\r\n\r\n                                if (!lootCardRemoved) {\r\n\r\n                                    System.out.println(\"No LootCards to remove from the player's hand.\");\r\n\r\n                                }\r\n\r\n                                endTurn = true;\r\n\r\n                                currentPlayer.hand.remove(selectedTreasureCard);\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case 2:\r\n                        // Use a loot card\r\n                        if (!currentPlayer.usedLootCardThisTurn) {\r\n                            System.out.println(\"Select a Loot Card to activate:\");\r\n\r\n                            for (int i = 0; i < currentPlayer.hand.size(); i++) {\r\n                                Card card = currentPlayer.hand.get(i);\r\n                                if (card instanceof LootCard) {\r\n                                    System.out.println(i + 1 + \". \" + card.name);\r\n                                }\r\n                            }\r\n\r\n                            System.out.println(\"Enter the number of the card to activate (or 0 to cancel):\");\r\n                            cardIndexToActivate = sc.nextInt();\r\n\r\n                            if (cardIndexToActivate > 0 && cardIndexToActivate <= currentPlayer.hand.size()) {\r\n                                LootCard selectedLootCard = (LootCard) currentPlayer.hand.get(cardIndexToActivate - 1);\r\n                                selectedLootCard.play(currentPlayer, cardIndexToActivate - 1);\r\n                            } else if (cardIndexToActivate != 0) {\r\n                                System.out.println(\"Invalid card selection.\");\r\n                            }\r\n                        } else {\r\n                            System.out.println(\"You can only use one Loot Card per turn.\");\r\n                        }\r\n                        break;\r\n\r\n                    case 3:\r\n\r\n                        // Buy a Treasure card\r\n\r\n                        if (!players.get(currentPlayerIndex).boughtItemThisTurn) {\r\n                            if (players.get(currentPlayerIndex).coins >= 10) {\r\n                                if (!shopItems.isEmpty()) {\r\n                                    System.out.println(\"Shop Items:\");\r\n                                    for (int i = 0; i < shopItems.size(); i++) {\r\n                                        System.out.println(i + 1 + \". \" + shopItems.get(i).name);\r\n                                    }\r\n                                    System.out.println(\"Enter the number of the item you want to buy: \");\r\n\r\n                                    int itemNumber = sc.nextInt();\r\n                                    if (itemNumber > 0 && itemNumber <= shopItems.size()) {\r\n                                        TreasureCard itemToBuy = shopItems.get(itemNumber - 1);\r\n                                        players.get(currentPlayerIndex).coins -= 10;\r\n                                        players.get(currentPlayerIndex).hand.add(itemToBuy);\r\n                                        shopItems.remove(itemToBuy);\r\n                                        players.get(currentPlayerIndex).boughtItemThisTurn = true;\r\n                                        System.out.println(\r\n                                                players.get(currentPlayerIndex).name + \" has bought \" + itemToBuy.name);\r\n                                    } else {\r\n                                        System.out.println(\"Invalid item number.\");\r\n                                    }\r\n                                } else {\r\n                                    System.out.println(\"Shop is empty.\");\r\n                                }\r\n                            } else {\r\n                                System.out.println(\"Not enough coins to buy an item.\");\r\n                            }\r\n                        } else {\r\n                            System.out.println(\"You can only buy one item per turn.\");\r\n                        }\r\n                        break;\r\n\r\n                    case 4:\r\n                        // Attack a monster\r\n                        if (monstersInPlay.size() > 0) {\r\n                            if (currentPlayer.hadFoughtAnEnemie) {\r\n                                System.out.println(\r\n                                        \"You've already fought an enemy this turn. You cannot attack another enemy.\");\r\n                            } else {\r\n                                // Display available monsters for the player to choose from\r\n                                System.out.println(\"Available monsters to attack:\");\r\n\r\n                                for (int i = 0; i < monstersInPlay.size(); i++) {\r\n                                    MonsterCard monster = monstersInPlay.get(i);\r\n                                    System.out.println(i + 1 + \". \" + monster.name + \" - Health: \" + monster.health\r\n                                            + \" - Evasion: \" + monster.evasion + \" - Damage: \" + monster.damage);\r\n                                }\r\n\r\n                                System.out.println(\r\n                                        \"Enter the number of the monster you want to attack (or 0 to cancel): \");\r\n                                int monsterIndexToAttack = sc.nextInt();\r\n\r\n                                if (monsterIndexToAttack > 0 && monsterIndexToAttack <= monstersInPlay.size()) {\r\n                                    MonsterCard selectedMonster = monstersInPlay.get(monsterIndexToAttack - 1);\r\n                                    int damage = currentPlayer.damage;\r\n\r\n                                    while (selectedMonster.health > 0 && currentPlayer.health > 0) {\r\n                                        // Generate a random number between 0 and 5 (inclusive)\r\n                                        int randomNumber = (int) (Math.random() * 6); // Random number between 0 and 5\r\n                                        // (inclusive)\r\n\r\n                                        if (randomNumber >= selectedMonster.evasion) {\r\n                                            // Attack successful\r\n                                            selectedMonster.health -= damage;\r\n                                            System.out\r\n                                                    .println(\"Dealt \" + damage + \" damage to \" + selectedMonster.name);\r\n                                        } else {\r\n                                            // Attack missed\r\n\r\n                                            int dodge = (int) (Math.random() * 4); // Generate a random number between 0\r\n                                            // and 3\r\n\r\n                                            boolean playerHasDryBaby = false; // Initialize the flag as false\r\n\r\n                                            for (Card treasureCard : currentPlayer.hand) {\r\n                                                if (treasureCard.name.equals(\"Dry Baby\")) {\r\n                                                    playerHasDryBaby = true;\r\n                                                    break; // You can exit the loop early since you've found \"Dry Baby\"\r\n                                                }\r\n                                            }\r\n\r\n                                            // Check if the player has \"Dry Baby\"\r\n\r\n                                            if (playerHasDryBaby && dodge == 2) {\r\n                                                System.out.println(\"Your attack missed but dodged enemie attack from: \"\r\n                                                        + selectedMonster.name);\r\n                                            } else {\r\n                                                System.out.println(\"Your attack missed \" + selectedMonster.name);\r\n\r\n                                                // Handle player's health for missed attack\r\n                                                int monsterDamage = selectedMonster.damage;\r\n                                                currentPlayer.health -= monsterDamage;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (selectedMonster.health <= 0) {\r\n                                            // Monster defeated\r\n                                            System.out.println(\"You defeated \" + selectedMonster.name);\r\n                                            monstersInPlay.remove(selectedMonster);\r\n\r\n                                            // Handle loot drop using monsterDefeated method\r\n                                            monsterDefeated(currentPlayer, selectedMonster.defeat);\r\n                                            break; // Exit the loop after defeating the monster\r\n                                        } else if (currentPlayer.health <= 0) {\r\n                                            // Player is defeated\r\n                                            System.out.println(currentPlayer.name + \" has been defeated!\");\r\n\r\n                                            if (currentPlayer.coins > 0) {\r\n                                                currentPlayer.coins -= 1;\r\n                                            }\r\n\r\n                                            boolean lootCardRemoved = false; // Flag to track if a LootCard has been\r\n                                            // removed\r\n\r\n                                            for (Card card : currentPlayer.hand) {\r\n                                                if (card instanceof LootCard) {\r\n                                                    currentPlayer.hand.remove(card);\r\n                                                    lootCardRemoved = true;\r\n                                                    break; // Remove only one LootCard\r\n                                                }\r\n                                            }\r\n\r\n                                            if (!lootCardRemoved) {\r\n                                                System.out.println(\"No LootCards to remove from the player's hand.\");\r\n                                            }\r\n\r\n                                            endTurn = true;\r\n\r\n                                            break;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Set the flag to indicate that the player has fought an enemy this turn\r\n                                    currentPlayer.hadFoughtAnEnemie = true;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            System.out.println(\"There are no monsters to attack.\");\r\n                        }\r\n                        break;\r\n\r\n                    case 5:\r\n                        // End the turn\r\n                        endTurn = true;\r\n\r\n                        break;\r\n                    default:\r\n                        System.out.println(\"Invalid choice. Try again.\");\r\n                }\r\n            } while (!endTurn);\r\n\r\n            // Update the game state (e.g., resolve monster attacks, check for win/loss\r\n            // conditions)\r\n            currentPlayerIndex = (currentPlayerIndex + 1) % players.size();\r\n        }\r\n\r\n        for (Player player : players) {\r\n\r\n            if (player.souls >= 4) {\r\n\r\n                System.out.println(\"Game over. \" + player.name + \" has collected 4 souls!\");\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // After the loop, you can check for game-over conditions or win conditions\r\n\r\n    public boolean isGameOver() {\r\n        for (Player player : players) {\r\n            if (player.souls >= 4) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void Main(String[] args) {\r\n\r\n        // Create a new game with a specified number of players.\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        System.out.println(\"Hi, welcome to TBOI FOUR SOULS, Simple Java Edition\");\r\n        System.out.println(\"Do you wanna see the rules?\");\r\n        System.out.println(\"1. Yes\");\r\n        System.out.println(\"2. No\");\r\n\r\n        int Rules = sc.nextInt();\r\n\r\n        if (Rules == 1) {\r\n\r\n            System.out.println(\"Welcome to The Binding of Isaac: Four Souls!\");\r\n            System.out.println(\"Objective: Be the first player to collect four Soul Hearts.\");\r\n\r\n            System.out.println(\"\\nSetup:\");\r\n            System.out.println(\"1. The game is played with 2-4 players.\");\r\n            System.out.println(\r\n                    \"2. Each player chooses a character card and starts with 1 coin, 1 loot card, and 3 loot cards in their hand.\");\r\n            System.out.println(\r\n                    \"3. Create a shop deck and a treasure deck with cards corresponding to the number of players.\");\r\n            System.out.println(\"4. Create a monster deck by selecting monster cards based on the players' choice.\");\r\n            System.out.println(\"5. The game board includes spaces for loot, shop, and monster cards.\");\r\n\r\n            System.out.println(\"\\nGameplay:\");\r\n            System.out.println(\"1. Players take turns in clockwise order.\");\r\n            System.out.println(\"2. On your turn, you can perform various actions:\");\r\n            System.out.println(\"   - Activate an active Treasure card.\");\r\n            System.out.println(\"   - Use a loot card.\");\r\n            System.out.println(\"   - Buy a Treasure card from the shop.\");\r\n            System.out.println(\"   - Attack a monster.\");\r\n            System.out.println(\"   - End your turn.\");\r\n\r\n            System.out.println(\"\\nActive Treasure Cards:\");\r\n            System.out.println(\"- Active Treasure cards can be used on your turn to activate their special effects.\");\r\n            System.out.println(\"- Some active cards have a cost, like coins or health.\");\r\n\r\n            System.out.println(\"\\nLoot Cards:\");\r\n            System.out.println(\r\n                    \"- Loot cards provide various effects, such as gaining coins, dealing damage, or healing.\");\r\n\r\n            System.out.println(\"\\nShop:\");\r\n            System.out.println(\"- You can spend coins to buy Treasure cards from the shop.\");\r\n            System.out.println(\"- The cost of each item in the shop is 10 coins.\");\r\n\r\n            System.out.println(\"\\nMonsters:\");\r\n            System.out.println(\r\n                    \"- Monsters are encountered during your turn. You can choose to attack a monster if there are any in play.\");\r\n            System.out.println(\"- Combat involves rolling a die to determine whether your attack is successful.\");\r\n            System.out.println(\"- Defeating monsters may reward you with Soul Hearts.\");\r\n\r\n            System.out.println(\"\\nEnd of Turn:\");\r\n            System.out.println(\"- Once you've taken your actions, you can choose to end your turn.\");\r\n\r\n            System.out.println(\"\\nWinning:\");\r\n            System.out.println(\"- The first player to collect four Soul Hearts wins the game.\");\r\n\r\n            System.out.println(\"\\nSpecial Cards:\");\r\n            System.out.println(\r\n                    \"- The game includes special cards like \\\"The Chest,\\\" \\\"Pandora's Box,\\\" and more, each with unique effects.\");\r\n\r\n            System.out.println(\"\\nGame Over:\");\r\n            System.out.println(\r\n                    \"- The game ends when a player collects four Soul Hearts or meets another victory condition, depending on the rules you've chosen.\");\r\n\r\n            System.out.println(\"\\nAdditional Rules:\");\r\n            System.out.println(\"- You can make variations by adding expansion packs or house rules.\");\r\n\r\n            System.out.println(\r\n                    \"\\nRemember to refer to the game's rulebook for specific card interactions and any additional rules or clarifications. Have fun playing The Binding of Isaac: Four Souls!\");\r\n\r\n        } else {\r\n\r\n            System.out.println(\" Alright! Good Luck to everyone.\");\r\n        }\r\n\r\n        System.out.println(\"How many players will be playing?\");\r\n        System.out.println(\"2 - 4\");\r\n        System.out.println(\"(We recommended for Java Simple Edition 2 players)\");\r\n\r\n        int players = sc.nextInt();\r\n\r\n        if (players == 1 || players >= 5) {\r\n\r\n            System.out.println(\"The game doesn't supports that many players\");\r\n\r\n        }else{\r\n\r\n            FourSoulsGame game = new FourSoulsGame(2);\r\n\r\n            // Start the game.\r\n\r\n            game.startGame();\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/m4plewe/collegetboicleaner/Main.java b/src/main/java/com/github/m4plewe/collegetboicleaner/Main.java
--- a/src/main/java/com/github/m4plewe/collegetboicleaner/Main.java	(revision 2243f040cfc5d08d19d0dc452b544403accf8818)
+++ b/src/main/java/com/github/m4plewe/collegetboicleaner/Main.java	(date 1698546436949)
@@ -1,6 +1,6 @@
 package com.github.m4plewe.collegetboicleaner;
-
 import java.util.*;
+
 class FourSoulsGame {
     public List<Player> players;
     public Deck treasureDeck;
@@ -8,6 +8,7 @@
     public Deck lootDeck;
     public List<MonsterCard> monstersInPlay;
     public List<TreasureCard> shopItems;
+
     public FourSoulsGame(int numPlayers) {
 
         Scanner sc = new Scanner(System.in);
@@ -64,31 +65,36 @@
     private Deck initializeTreasureDeck() {
         Deck deck = new Deck();
 
-        // Treasure Deck:
+        // Treasure Cards
 
-        deck.addCard(new TreasureCard("Brimstone", false, false));
-        deck.addCard(new TreasureCard("Sausage", false, false));
-        deck.addCard(new TreasureCard("Sacred Heart", false, false));
-        deck.addCard(new TreasureCard("Dinner", false, false));
-        deck.addCard(new TreasureCard("Lard", false, false));
-        deck.addCard(new TreasureCard("Dry Baby", false, false));
-        deck.addCard(new TreasureCard("Empty Vessel", false, false));
-        deck.addCard(new TreasureCard("Greed's Gullet", false, false));
-        deck.addCard(new TreasureCard("Meat!", false, false));
-        deck.addCard(new TreasureCard("Synthoil", false, false));
+        deck.addCard(new TreasureCard("Sausage: +1 Health +1 Damage", false, false));
+        deck.addCard(new TreasureCard("Sacred Heart: +2 Health and +1 Damage", false, false));
+        deck.addCard(new TreasureCard("Dinner: +1 Health", false, false));
+        deck.addCard(new TreasureCard("Lard: +2 Health", false, false));
+        deck.addCard(new TreasureCard("Dry Baby: Blocks enemy attacks 25% chance", false, false));
+        deck.addCard(new TreasureCard(
+                "Empty Vessel: +2 and +2 if less than 5 Cards on Hand else +1 Damage and +1 Coins per turn", false,
+                false));
+        deck.addCard(new TreasureCard("Greed's Gullet: +3 coins each turn", false, false));
+        deck.addCard(new TreasureCard("Meat!: +1 Health", false, false));
+        deck.addCard(new TreasureCard("Synthoil: +1 Damage", false, false));
 
-        // Active
+        // Active Treasure Cards
 
-        deck.addCard(new TreasureCard("The Chest", true, false));
-        deck.addCard(new TreasureCard("Pandora's Box", true, false));
-        deck.addCard(new TreasureCard("The Battery", true, false));
-        deck.addCard(new TreasureCard("Host Hat", true, false));
-        deck.addCard(new TreasureCard("Mystery Sack", true, false));
-        deck.addCard(new TreasureCard("Book of Sin", true, false));
-        deck.addCard(new TreasureCard("Chaos Card", true, false));
-        deck.addCard(new TreasureCard("Battery Bum", true, false));
-        deck.addCard(new TreasureCard("Dark Bum", true, false));
-        deck.addCard(new TreasureCard("Plan C", true, false));
+        deck.addCard(new TreasureCard("The Chest: Gain a Soul (Destroys on use)", true, false));
+        deck.addCard(new TreasureCard(
+                "Pandora's Box: Random effect (+1$, +6$, +999 damage, +3 Loot, +9$, +1 Souls (Destroys on use))", true,
+                false));
+        deck.addCard(
+                new TreasureCard("The Battery: Reset turn effects (can use loot, shop and fight again)", true, false));
+        deck.addCard(new TreasureCard("Host Hat: +2 Health", true, false));
+        deck.addCard(new TreasureCard("Mystery Sack: Random effect (+1 Loot, +4$)", true, false));
+        deck.addCard(new TreasureCard("Book of Sin: Random effect (+1 $, +1 Loot, +1 Heart)", true, false));
+        deck.addCard(new TreasureCard("Chaos Card: Defeat all monsters (Destroys on use)", true, false));
+        deck.addCard(new TreasureCard("Battery Bum: Reactivate a used active card per 4$", true, false));
+        deck.addCard(new TreasureCard("Dark Bum: Random effect (+3$, +1 Loot, -1 Health)", true, false));
+        deck.addCard(
+                new TreasureCard("Plan C: Defeat all monsters and u die with them (Destroys on use)", true, false));
 
         Collections.shuffle(deck.cards);
 
@@ -99,54 +105,49 @@
 
         Deck deck = new Deck();
 
-        deck.addCard(new LootCard("A Penny!", "", "aPenny", false));
-        deck.addCard(new LootCard("2 Cents!", "", "twoCents", false));
-        deck.addCard(new LootCard("3 Cents!", "", "threeCents", false));
-        deck.addCard(new LootCard("4 Cents!", "", "fourCents", false));
-        deck.addCard(new LootCard("Bomb", "", "bomb", false));
-        deck.addCard(new LootCard("Charged Penny", "", "chargedPenny", false));
-        deck.addCard(new LootCard("Credit Card", "", "creditCard", false));
-        deck.addCard(new LootCard("Jera", "", "jera", false));
-        deck.addCard(new LootCard("Soul Heart", "", "soulHeart", false));
+        deck.addCard(new LootCard("A Penny! (Self explanatory)", "", "aPenny", false));
+        deck.addCard(new LootCard("2 Cents! (Self explanatory)", "", "twoCents", false));
+        deck.addCard(new LootCard("3 Cents! (Self explanatory)", "", "threeCents", false));
+        deck.addCard(new LootCard("4 Cents! (Self explanatory)", "", "fourCents", false));
+        deck.addCard(new LootCard("Bomb (+1 Damage this turn)", "", "bomb", false));
+        deck.addCard(new LootCard("Charged Penny (+1 Coin and Reset turn effects (can use loot, shop and fight again)",
+                "", "chargedPenny", false));
+        deck.addCard(new LootCard("Credit Card (+10 coins)", "", "creditCard", false));
+        deck.addCard(new LootCard("Jera ( +1-3 Damage, +1-3 Health, +1-5 Coins)", "", "jera", false));
+        deck.addCard(new LootCard("Soul Heart (+2 Health)", "", "soulHeart", false));
 
         // Repitiendo para luego el shuffle
 
-        deck.addCard(new LootCard("A Penny!", "", "aPenny", false));
-        deck.addCard(new LootCard("2 Cents!", "", "twoCents", false));
-        deck.addCard(new LootCard("3 Cents!", "", "threeCents", false));
-        deck.addCard(new LootCard("4 Cents!", "", "fourCents", false));
-        deck.addCard(new LootCard("Bomb", "", "bomb", false));
-        deck.addCard(new LootCard("Charged Penny", "", "chargedPenny", false));
-        deck.addCard(new LootCard("Credit Card", "", "creditCard", false));
-        deck.addCard(new LootCard("Jera", "", "jera", false));
-        deck.addCard(new LootCard("Soul Heart", "", "soulHeart", false));
-        deck.addCard(new LootCard("A Penny!", "", "aPenny", false));
-        deck.addCard(new LootCard("2 Cents!", "", "twoCents", false));
-        deck.addCard(new LootCard("3 Cents!", "", "threeCents", false));
-        deck.addCard(new LootCard("4 Cents!", "", "fourCents", false));
-        deck.addCard(new LootCard("Bomb", "", "bomb", false));
-        deck.addCard(new LootCard("Charged Penny", "", "chargedPenny", false));
-        deck.addCard(new LootCard("Credit Card", "", "creditCard", false));
-        deck.addCard(new LootCard("Jera", "", "jera", false));
-        deck.addCard(new LootCard("Soul Heart", "", "soulHeart", false));
-        deck.addCard(new LootCard("A Penny!", "", "aPenny", false));
-        deck.addCard(new LootCard("2 Cents!", "", "twoCents", false));
-        deck.addCard(new LootCard("3 Cents!", "", "threeCents", false));
-        deck.addCard(new LootCard("4 Cents!", "", "fourCents", false));
-        deck.addCard(new LootCard("Bomb", "", "bomb", false));
-        deck.addCard(new LootCard("Charged Penny", "", "chargedPenny", false));
-        deck.addCard(new LootCard("Credit Card", "", "creditCard", false));
-        deck.addCard(new LootCard("Jera", "", "jera", false));
-        deck.addCard(new LootCard("Soul Heart", "", "soulHeart", false));
-        deck.addCard(new LootCard("A Penny!", "", "aPenny", false));
-        deck.addCard(new LootCard("2 Cents!", "", "twoCents", false));
-        deck.addCard(new LootCard("3 Cents!", "", "threeCents", false));
-        deck.addCard(new LootCard("4 Cents!", "", "fourCents", false));
-        deck.addCard(new LootCard("Bomb", "", "bomb", false));
-        deck.addCard(new LootCard("Charged Penny", "", "chargedPenny", false));
-        deck.addCard(new LootCard("Credit Card", "", "creditCard", false));
-        deck.addCard(new LootCard("Jera", "", "jera", false));
-        deck.addCard(new LootCard("Soul Heart", "", "soulHeart", false));
+        deck.addCard(new LootCard("A Penny! (Self explanatory)", "", "aPenny", false));
+        deck.addCard(new LootCard("2 Cents! (Self explanatory)", "", "twoCents", false));
+        deck.addCard(new LootCard("3 Cents! (Self explanatory)", "", "threeCents", false));
+        deck.addCard(new LootCard("4 Cents! (Self explanatory)", "", "fourCents", false));
+        deck.addCard(new LootCard("Bomb (+1 Damage this turn)", "", "bomb", false));
+        deck.addCard(new LootCard("Charged Penny (+1 Coin and Reset turn effects (can use loot, shop and fight again)",
+                "", "chargedPenny", false));
+        deck.addCard(new LootCard("Credit Card (+10 coins)", "", "creditCard", false));
+        deck.addCard(new LootCard("Jera ( +1-3 Damage, +1-3 Health, +1-5 Coins)", "", "jera", false));
+        deck.addCard(new LootCard("Soul Heart (+2 Health)", "", "soulHeart", false));
+        deck.addCard(new LootCard("A Penny! (Self explanatory)", "", "aPenny", false));
+        deck.addCard(new LootCard("2 Cents! (Self explanatory)", "", "twoCents", false));
+        deck.addCard(new LootCard("3 Cents! (Self explanatory)", "", "threeCents", false));
+        deck.addCard(new LootCard("4 Cents! (Self explanatory)", "", "fourCents", false));
+        deck.addCard(new LootCard("Bomb (+1 Damage this turn)", "", "bomb", false));
+        deck.addCard(new LootCard("Charged Penny (+1 Coin and Reset turn effects (can use loot, shop and fight again)",
+                "", "chargedPenny", false));
+        deck.addCard(new LootCard("Credit Card (+10 coins)", "", "creditCard", false));
+        deck.addCard(new LootCard("Jera ( +1-3 Damage, +1-3 Health, +1-5 Coins)", "", "jera", false));
+        deck.addCard(new LootCard("Soul Heart (+2 Health)", "", "soulHeart", false));
+        deck.addCard(new LootCard("A Penny! (Self explanatory)", "", "aPenny", false));
+        deck.addCard(new LootCard("2 Cents! (Self explanatory)", "", "twoCents", false));
+        deck.addCard(new LootCard("3 Cents! (Self explanatory)", "", "threeCents", false));
+        deck.addCard(new LootCard("4 Cents! (Self explanatory)", "", "fourCents", false));
+        deck.addCard(new LootCard("Bomb (+1 Damage this turn)", "", "bomb", false));
+        deck.addCard(new LootCard("Charged Penny (+1 Coin and Reset turn effects (can use loot, shop and fight again)",
+                "", "chargedPenny", false));
+        deck.addCard(new LootCard("Credit Card (+10 coins)", "", "creditCard", false));
+        deck.addCard(new LootCard("Jera ( +1-3 Damage, +1-3 Health, +1-5 Coins)", "", "jera", false));
+        deck.addCard(new LootCard("Soul Heart (+2 Health)", "", "soulHeart", false));
 
         Collections.shuffle(deck.cards);
 
@@ -178,6 +179,20 @@
         }
     }
 
+    public void Jera(Player player, int quantity) {
+
+        for (int i = 0; i < quantity; i++) {
+
+            LootCard card = lootDeck.drawLoot();
+            if (card != null) {
+                player.hand.add(card);
+                System.out.println("Duplicated: " + card.name);
+            } else {
+                System.out.println("No more loot cards to duplicate.");
+                break; // If there are no more loot cards to duplicate, exit the loop
+            }
+        }
+    }
 
     public void monsterDefeated(Player player, String monsterDefeatString) {
 
@@ -810,7 +825,7 @@
         return false;
     }
 
-    public static void Main(String[] args) {
+    public static void main(String[] args) {
 
         // Create a new game with a specified number of players.
 
@@ -899,7 +914,7 @@
 
             System.out.println("The game doesn't supports that many players");
 
-        }else{
+        } else {
 
             FourSoulsGame game = new FourSoulsGame(2);
 
